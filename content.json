{"pages":[{"title":"about","text":"偷偷笑的人是我123456#include&lt;iostream&gt;using namespace std;int main(){ cout&lt;&lt;\"偷偷笑的人是我\"&lt;&lt;end; return 1;}","link":"/about/index.html"}],"posts":[{"title":"frp内网穿透","text":"​ 为了将内网服务器能够在外网进行访问，可以使用免费的花生壳进行内网穿透，但是花生壳的免费版本，不稳定，而且网速很慢。于是搜索到frp开源项目，其用go语言开发。frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。其包括一个客户端软件(frpc)和一个服务端软件(frps)，服务端软件需要运行到有公网IP的服务器上。 frp软件下载解压​ frp项目的作者已经将各个系统上的frp软件已经编译好了，根据自己的系统下载对应的软件包即可，网址如下https://github.com/fatedier/frp/releases ​ 以ubuntu系统为例 1234# 命令行下载$ wget -i https://github.com/fatedier/frp/releases/download/v0.31.1/frp_0.31.1_linux_amd64.tar.gz# 解压软件包$ tar -xvzf frp_0.31.1_linux_amd64.tar.gz ​ 解压后，得到如下文件 frp服务端软件配置​ frps为公网IP服务端运行的软件，其需要配置frps.ini文件即可，下面为默认的frps.ini的配置。 12[common]bind_port = 7000 ​ 如果需要将web服务映射到外网，那需要设置http或https的端口。 1234# if you want to support virtual host, you must set the http port for listening (optional)# Note: http port and https port can be same with bind_portvhost_http_port = 80vhost_https_port = 443 frps还提供更加丰富的配置功能(本此配置ssh)，具体配置项可查看frp目录下的frps_full.ini。 frps软件的运行在命令行终端执行./frps -c ./frps.ini，执行成功有如下日志输出。 为了能够让frps在服务器的后台进行运行，需要使用nohup和＆指令 1$ nohup ./frps -c ./frps.ini &amp; 到此为止，服务端的软件配置运行完成。 frpc客户端软件配置与运行在frp目录下，包含frpc客户端软件，其也是需要配置frpc.ini文件 123456789101112131415[common]# 配置公网服务器的ip地址server_addr = 129.204.124.12# 配置frps.ini文件中绑定的端口号，默认为7000，可以更改为自定义端口(需要和服务端的一致)server_port = 7000# 配置ssh[ssh]# 连接类型type = tcp# 本地iplocal_ip = 127.0.0.1# ssh服务的端口号，默认的端口号为22local_port = 22# 路由端口号，即通过外网ip加该端口号进行访问remote_port = 10907 保存以上配置后，运行frpc软件，./frpc -c ./frpc.ini（同样可以使用nohup和＆使程序后台运行） 如上图所示，即运行成功。 开启多个ssh穿透如果需要将多个本地计算机进行ssh穿透，需要将frpc.ini文件中ssh字段名称保持唯一。 计算机１的frpc.ini配置文件 12345678910111213141516#计算机１[common]# 配置公网服务器的ip地址server_addr = 129.204.124.12# 配置frps.ini文件中绑定的端口号，默认为7000，可以更改为自定义端口(需要和服务端的一致)server_port = 7000# 配置ssh[ssh001]#需要保持其唯一# 连接类型type = tcp# 本地iplocal_ip = 127.0.0.1# ssh服务的端口号，默认的端口号为22local_port = 22# 路由端口号，即通过外网ip加该端口号进行访问remote_port = 10907 计算机２的frpc.ini配置文件 123456789101112131415[common]# 配置公网服务器的ip地址server_addr = 129.204.124.12# 配置frps.ini文件中绑定的端口号，默认为7000，可以更改为自定义端口(需要和服务端的一致)server_port = 7000# 配置ssh[ssh002]#需要保持其唯一# 连接类型type = tcp# 本地iplocal_ip = 127.0.0.1# ssh服务的端口号，默认的端口号为22local_port = 22# 路由端口号，即通过外网ip加该端口号进行访问remote_port = 10908 测试ssh连接在命令行中，执行ssh lw@129.204.124.12 -p 10907，输入密码进行登录 登录成功即可愉快的玩耍了！！！！！！！！！！！ 参考文章链接https://github.com/fatedier/frp/releases https://github.com/fatedier/frp/blob/master/README_zh.md https://blog.csdn.net/qq_37933127/article/details/90706608","link":"/2020/01/18/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"title":"hexo个人博客搭建","text":"hexo是基于nodejs的个人博客的框架平台https://github.com/hexojs/hexo，其提供许多的主题和插件供我们使用。对于搭建自己的个人博客来说，hexo是一个非常好的选择。 搭建hexo个人博客需要在本地计算机安装nodejs和hexo等相关软件；在远端服务器上，我们可以选择自己的云服务器和github上的个人仓库进行网站部署。 本机安装hexo安装nodejshttps://www.jianshu.com/p/1f3f2c74e6a7 更新nodejs源 1234sudo apt-get updatesudo apt-get install -y python-software-properties software-properties-common sudo add-apt-repository ppa:chris-lea/node.js sudo apt-get update 下载nodejs 123sudo apt-get install nodejs sudo apt install nodejs-legacy sudo apt install npm 更新nodejs的淘宝源和安装cnpm 123sudo npm config set registry https://registry.npm.taobao.org sudo npm config listsudo npm install -g cnpm --registry=https://registry.npm.taobao.org 在命令行终端执行 12node -vcnpm -v 如果安装成功，显示如下输出 安装并初始化hexo 安装hexo 1cnpm install -g hexo-cli 安装hexo插件 12npm install hexo-deployer-git --savenpm install hexo-server 初始化hexo 选择一个初始化目录在该目录下执行hexo init，会在该目录生成hexo个人博客所需要的文件，其中_config.yml文件是我们后面部署到服务器上需要配置的。 使用hexo new &quot;我的第一个blog&quot;，新建一篇名字为我的第一个blog的博客文章。 生成网页并本地预览 在命令行终端里执行如下命令 12hexo ghexo s 如果命令行输出如下，则成功生成博客网页 在浏览器中输入http://localhost:4000，即可预览。 在云服务器中部署在云服务器中进行部署，我们可以新建一个git用户专门进行上传部署，在云服务器中我们需要安装nginx和git。 新建git用户执行如下命令 12sudo -sadduser git 建立git用户成功后，将git用户赋予sudo权限nano /etc/sudoer，把git用户名按照如下格式添加。git ALL=(ALL:ALL) ALL，添加成功后保存退出。 安装nginx和git执行如下命令 12sudo apt install nginxsudo apt install git 配置nginx在服务器上新建一个保存博客网站的文件夹，我的是使用/home/git/website。在nginx的配置文件夹/etc/nginx/下新建vhost文件夹并在该文件夹下新建blog.conf文件，并填写如下内容并保存。 1234567server{ listen 80; root /home/git/website; server_name 服务器名称; location /{ }} 将vhost/blog.conf文件的路径添加到nginx.conf文件中并保存。 1include /etc/nginx/vhost/*.conf; 配置git新建一个博客的git仓库，在git用户的目录下执行git init --bare blog.git，在用户目录下生成了一个名为blog.git的仓库，在该仓库下的hooks文件夹中新建一个名为post-receive的文件输出一下内容并且保存。 1git --work-tree=/home/git/website --git-dir=/home/git/blog.git checkout -f 对该文件赋予+x权限 1chmod +x post-receive 配置本机_config.yml文件在_config.yml文件中的deploy字段中，按照如下格式进行填写： 12345deploy: type: 'git' repo: 'git@ip:/home/git/blog.git' branch: 'master' message: 保存后，在命令行中执行hexo d进行云服务器部署，然后在浏览器中输入ip地址进行访问。 在github中部署在github中进行部署没有麻烦的步骤，需要在个人的github账户中新建一个仓库(仓库名称：用户名.github.io)，例如LW-SCU.github.io。 将_config.yml文件中的deploy下的repo字段改为github的仓库的地址,例如： 12345deploy: type: 'git' repo: 'git@github.com:LW-SCU/LW-SCU.github.io.git' branch: 'master' message: 保存后，在命令行中执行hexo d进行云服务器部署，然后在浏览器中输入LW-SCU.github.io进行访问。 参考链接https://github.com/hexojs/hexo https://blog.csdn.net/NoCortY/article/details/99631249 https://blog.csdn.net/Wales_2015/article/details/79643336","link":"/2020/01/18/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"hexo的使用和设置","text":"hexo的进阶 hexo的参数使用 hexo init hexo init初始化hexo的博客资源文件 hexo new &quot;标题&quot; hexo new &quot;标题&quot;新建一个名为标题的博客文章 hexo g hexo g将markdown格式的文章转化为网页，即生成网站 hexo clean hexo clean将生成的网站进行清理 hexo s hexo s将本机生成的网站进行本地预览，其开启4000端口 hexo d hexo d将本地的网站的全部网页文件部署到远端服务器中 hexo更换主题 将个人下载的hexo放到hexo资源目录下的themes文件夹下 将_config.yml文件中的theme字段改为新的主题的名称并保存 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-icarus 重新生成网站并部署 hexo插入本地图片hexo插入本地图片，生成网站后，不能找到本地图片路径，需要在_config.ylm中将post_asset_folder字段的值改为true。在执行hexo new后，会生成标题名称一致的文件夹，将本地文件放在其中即可。 文章添加多个标签将markdown格式的文件的最顶部的yml区域中的tags字段改为如下： 12345tags: - 标签１ - 标签２ - 标签３ - ... 设置略缩图 选择可以设置略缩图的主题（例如hexo-theme-icarus） 在文章的front-matter中设置thumbnail字段，如下： 1thumbnail: 图片地址 参考文章 开启文章评论 参考文章 参考链接https://hexo.io/zh-cn/docs/ https://github.com/ppoffice/hexo-theme-icarus https://blog.zhangruipeng.me/hexo-theme-icarus/","link":"/2020/01/29/hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%AE%BE%E7%BD%AE/"},{"title":"好看的皮囊千篇一律，有趣的灵魂万里挑一","text":"努力使人优秀！！！！！！！ 为什么我总是做让自己后悔的事情!!!!!","link":"/2020/01/27/%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%9A%AE%E5%9B%8A%E5%8D%83%E7%AF%87%E4%B8%80%E5%BE%8B%EF%BC%8C%E6%9C%89%E8%B6%A3%E7%9A%84%E7%81%B5%E9%AD%82%E4%B8%87%E9%87%8C%E6%8C%91%E4%B8%80/"},{"title":"docker学习","text":"学啥啥不会的人学docker docker学习docker安装docker容器分为企业版和社区版本，我们使用社区版即可，docker安装步骤来源于docker 官方文档。 12345678910111213141516171819202122232425262728293031# 卸载系统中的老旧版本的docker软件$ sudo apt-get remove docker docker-engine docker.io containerd runc# 更新软件源sudo apt-get update# 安装前置软件包sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # 添加docker软件源curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -sudo apt-key fingerprint 0EBFCD88sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\"# 更新软件源sudo apt-get update# 安装docker软件sudo apt-get install docker-ce docker-ce-cli containerd.io# 测试docker是否安装成功sudo docker -vDocker version 19.03.13, build 4484c46d9d # 成功输出docker版本信息 docker 使用docker 的运行必须是在管理员用户(root)权限下运行,普通用户没有权限运行，docker指令文档参考于docker cli。 启动docker 1sudo systemctl start docker 设置docker开机自启动 1sudo systemctl enable docker docker运行hello world 123456sudo -s# run表示根据镜像名称创建一个容器，如果本地没有指定的镜像则去dockerhub上进行查找下载# -i -t 表示可以与终端进行交互,-d表示容器以守护进程方式进行运行,在容器运行中经常需要加入该字段# --rm 表示运行完成后自动删除容器# hello-world 表示镜像的名称docker run -it --rm hello-world 获得如下输出 查看镜像列表 12# 列举出本地加载的镜像文件docker images 查看所有容器 12345# 以不删除容器的方式,运行hello-worlddocker run -it hello-world# 查看存在的容器列表# ps 查看正在运行的容器,-a查看全部容器(包括退出运行的所有容器)docker ps -a 容器,镜像的常规操作 容器的启动 123# start为启动容器指令, -i表示与终端进行交互(输出输入数据),# zealous_nash为容器的名称,可以在创建容器的指令中加入 --name参数设置容器名称docker start -i zealous_nash 容器的附加，停止 123456789101112# 从国内镜像hub拉取ubuntu的镜像docker pull hub.c.163.com/library/ubuntu:latest# 生成ubuntu容器并运行bash# --name 指定容器名称为ubuntudocker run -itd --rm --name ubuntu hub.c.163.com/library/ubuntu:latest /bin/bash# 查看正在运行中的容器docker ps# 后台运行的容器的附加docker exec -it ubuntu /bin/bash# 停止正在运行的容器docker stop ubuntu 容器的删除 123# 容器删除操作只能针对停止运行的容器docker rm zealous_nashdocker rm ubuntu 镜像的删除 12# 删除hello-world镜像,当不存在hello-world镜像生成的容器时，才能删除该镜像docker rmi hello-world:latest 管理docker 查看docker的磁盘使用情况 1docker system df 删除docker中未使用的数据 1docker system prune 更改docker容器内的时区docker容器内的时间与本机时间相差8个小时，这是因为docker容器的时间为UTC(协调世界时)。 我本机的时间为CST(中国标准时间)，因此它们相差了8个小时，为了使容器的时间和本机时间一致，需要将容器的时区与本机的时区进行统一。将本机的/etc/localtime挂载到容器的/etc/localtime即可。 12# -v参数是进行文件挂载参数，将本机文件挂载到容器的文件下，ro表示只读docker run -it -v /etc/localtime:/etc/localtime:ro --name true_date_ubuntu ubuntu:latest /bin/bash 可以看到容器内的时间与本机的时间一致了。 参考文献 install docker on ubuntu nvidia-docker install nvidia-docker2 on ubuntu Dockerfile guide change docker time","link":"/2020/11/12/docker%E5%AD%A6%E4%B9%A0/"},{"title":"Dockerfile学习","text":"学啥啥不会的人学Dockerfile","link":"/2020/11/12/Dockerfile%E5%AD%A6%E4%B9%A0/"},{"title":"nvidia-docker2学习","text":"学啥啥不会的人学nvidia-docker2 nvidia-docker2学习nvidia-docker2是在docker上进行的一层封装，使其能够方便快捷的使用本机的GPU资源，因此在安装nvidia-docker2之前必须安装好docker。 nvidia-docker2安装以下步骤是以安装好docker后进行，安装步骤参考于install nvidia-docker2 on ubuntu。 12345678910111213141516# 加入nvidia-docker2的源distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\ &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \\ &amp;&amp; curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # 更新源sudo apt-get update# 安装软件sudo apt-get install -y nvidia-docker2# 重启dockersudo systemctl restart docker# 测试nvidia-docker2是否安装成功sudo docker run --rm --gpus all nvidia/cuda:10.0-base nvidia-smi 上图为安装成功的nvidia-docker2的输出，可以看到nvidia-smi输出了显卡的相关信息。 nvidia-docker2学习nvidia-docker2的参数指令参考于Environment variables (OCI spec)。 –gpus参数，环境变量NVIDIA_VISIBLE_DEVICES --gpus可以指定在容器内可见的gpu，也可以设置环境变量NVIDIA_VISIBLE_DEVICES达到一样的效果，可以设置的值如下。 1234567891011121314151617181920# --gpus设置所有gpu可见docker run --rm --gpus all nvidia/cuda nvidia-smi# 使用NVIDIA_VISIBLE_DEVICES环境变量进行设置，必须设置--runtime参数为nvidiadocker run --rm --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all nvidia/cuda:10.0-base nvidia-smi# 使用--gpus指定gpu0,gpu1可见docker run --rm --gpus device=0,1 nvidia/cuda:10.0-base nvidia-smi --query-gpu=uuid --format=csv# 使用NVIDIA_VISIBLE_DEVICES环境变量指定gpu0,gpu1docker run --rm --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=0,1 nvidia/cuda:10.0-base nvidia-smi --query-gpu=uuid --format=csv# 使用gpu uuid来指定gpu可见nvidia-smi -i 0 --query-gpu=uuid --format=csvuuidGPU-e9d8645b-c04a-c199-e58c-d2aacc93f4a3docker run --rm --gpus device=GPU-e9d8645b-c04a-c199-e58c-d2aacc93f4a3 nvidia/cuda:10.0-base nvidia-smidocker run --rm --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=GPU-e9d8645b-c04a-c199-e58c-d2aacc93f4a3 nvidia/cuda:10.0-base nvidia-smi 驱动能力 驱动能力通过设置NVIDIA_DRIVER_CAPABILITIES环境变量来实现，可取值如下。 具体描述如下。 123docker run --rm --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=0 -e NVIDIA_DRIVER_CAPABILITIES=compute,utility nvidia/cuda:10.0-base nvidia-smidocker run --rm --gpus 'all,\"capabilities=compute,utility\"' nvidia/cuda:10.0-base nvidia-smi 约束能力 通过设置NVIDIA_REQUIRE_*环境变量对显卡进行约束，具体使用参看https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#nvidia-require 参考文献 install docker on ubuntu nvidia-docker install nvidia-docker2 on ubuntu Dockerfile guide change docker time Environment variables (OCI spec)","link":"/2020/11/12/nvidia-docker2%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"frp","slug":"frp","link":"/tags/frp/"},{"name":"内网穿透","slug":"内网穿透","link":"/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"wget","slug":"wget","link":"/tags/wget/"},{"name":"tar","slug":"tar","link":"/tags/tar/"},{"name":"nohup","slug":"nohup","link":"/tags/nohup/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"感想","slug":"感想","link":"/tags/%E6%84%9F%E6%83%B3/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"nvidia-docker2","slug":"nvidia-docker2","link":"/tags/nvidia-docker2/"}],"categories":[{"name":"frp","slug":"frp","link":"/categories/frp/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"杂谈","slug":"杂谈","link":"/categories/%E6%9D%82%E8%B0%88/"},{"name":"docker","slug":"docker","link":"/categories/docker/"}]}